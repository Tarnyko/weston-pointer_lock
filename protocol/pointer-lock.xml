<?xml version="1.0" encoding="UTF-8"?>
<protocol name="pointer_lock">

  <copyright>
    Copyright © 2014      Jonas Ådahl
    Copyright © 2015      Red Hat Inc.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="_wl_pointer_lock" version="1">
    <description summary="lock pointer to a surface">
      The global interface exposing pointer locking functionality. It exposes
      two requests; lock_pointer for locking the pointer to its position, and
      confine_pointer for locking the pointer to a region.

      The lock_pointer and confine_pointer creates the objects wl_locked_pointer
      and wl_confined_pointer respectively, and the client can use these objects
      to interact with the lock.

      For any surface, only one lock or confinement per seat may be active at
      any time. If a lock or confinement is requested when another lock or
      confinement is active on that surface and seat, an 'already_locked' error
      will be raised.

      Warning! The protocol described in this file is experimental. Each version
      of this protocol should be considered incompatible with any other version,
      and a client binding to a version different to the one advertised will be
      terminated. When the protocol is stabalized, backward compatibility is
      guaranteed, the '_' prefix will be removed from the name and the version
      will be reset to 1.
    </description>

    <enum name="error">
      <description summary="wl_pointer_lock error values">
        These errors can be emitted in response to wl_pointer_lock requests.
      </description>
      <entry name="already_locked" value="0" summary="pointer was already locked or confined"/>
    </enum>

    <request name="lock_pointer">
      <description summary="lock pointer to a position">
        The lock_pointer request lets the client disable absolute pointer
        movements, locking the pointer to a position. In the future, when the
        compositor deems implementation specific constraints are satisfied, the
        pointer lock will be activated and the compositor sends a locked event.

        The protocol provides no guarantee that the constraints are ever
        satisfied, and does not require the compositor to send an error if the
        constraints cannot ever be satisfied. It is thus possible to request a
        lock that will never activate.

        There may not be another lock of any kind requested or active on the
        surface for the seat when requesting a lock, and if there is, an error
        will be raised. See general pointer lock documentation for more details.

        The intersection of the region passed with this request and the input
        region of the surface is used to determine where the pointer must be
        in order for the lock to activate. It is up to the compositor to warp
        the pointer, or require some kind of user interaction for the lock to
        activate. If the region is null the surface input region is used.

        A surface may receive pointer focus without the lock being activated.

        The request will create a new object wl_locked_pointer which is used to
        interact with the lock as well as receive updates about its state. See
        the the description of wl_locked_pointer for further information.

        Note that while a pointer is locked, the wl_pointer objects of the
        corresponding seat will not emit any motion events, but relative motion
        events will still be emitted via wl_relative_pointer objects of the
        same seat.
      </description>

      <arg name="id" type="new_id" interface="_wl_locked_pointer"/>
      <arg name="surface" type="object" interface="wl_surface"
           summary="surface to lock pointer to"/>
      <arg name="seat" type="object" interface="wl_seat"
           summary="seat where the pointer should be locked"/>
      <arg name="region" type="object" interface="wl_region" allow-null="true"
           summary="region of surface"/>
    </request>

    <request name="confine_pointer">
      <description summary="confine pointer to a region">
        The confine_pointer request lets the client confine the pointer cursor
        to a given region.

        The intersection of the region passed with this request and the input
        region of the surface is used to determine where the pointer must be
        in order for the confinement to activate. It is up to the compositor to
        warp the pointer, or require some kind of user interaction for the
        confinement to activate. If the region is null the surface input region
        is used.

        The request will create a new object wl_confined_pointer which is used
        to interact with the confinement as well as receive updates about its
        state. See the the description of wl_confined_pointer for further
        information.
      </description>

      <arg name="id" type="new_id" interface="_wl_confined_pointer"/>
      <arg name="surface" type="object" interface="wl_surface"
           summary="surface to lock pointer to"/>
      <arg name="seat" type="object" interface="wl_seat"
           summary="seat where the pointer should be locked"/>
      <arg name="region" type="object" interface="wl_region" allow-null="true"
           summary="region of surface"/>
    </request>
  </interface>

  <interface name="_wl_locked_pointer" version="1">
    <description summary="receive relative pointer motion events">
      The wl_locked_pointer interface represents a locked pointer state.

      While the lock of this object is active, the wl_pointer objects of the
      associated seat will not emit any motion events.

      This object will send the event 'locked' when the lock is activated.
      Whenever the lock is activated, it is guaranteed that the locked surface
      will already have received pointer focus and that the pointer will be
      within the region passed to the request creating this object.

      To unlock the pointer, send the destroy request. This will also destroy
      the wl_locked_pointer object.

      If the compositor decides to unlock the pointer the unlocked event is
      sent. The wl_locked_pointer object is at this point defunct and should be
      destroyed.

      When unlocking, the compositor may take the cursor position pointer. If
      it does, it will not result in any relative motion events emitted via
      wl_relative_motion.

      If the surface lock was requested on is destroyed and the lock is not yet
      activated, the wl_locked_pointer object is now defunct and must be
      destroyed.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the locked pointer object">
        Destroy the locked pointer object. The compositor will unlock the
        pointer.
      </description>
    </request>

    <request name="set_cursor_position_hint">
      <description summary="set the pointer cursor position hint">
        Set the cursor position hint relative to the top left corner of the
        surface.

        If the client is drawing its own cursor, it should update the position
        hint to the position of its own cursor. A compositor may use this
        information to warp the pointer upon unlock in order to avoid pointer
        jumps.
      </description>

      <arg name="surface_x" type="fixed"
           summary="x coordinate in surface-relative coordinates"/>
      <arg name="surface_y" type="fixed"
           summary="y coordinate in surface-relative coordinates"/>
    </request>

    <request name="set_region">
      <description summary="set a new lock region">
        Set a new region used to lock the pointer.

        The new lock region is double-buffered. The new lock region will
        only take effect when the associated surface gets its pending state
        applied. See wl_surface.commit for details.

        The new region has no effect on a lock that has already been activated.

        For details about the lock region, see wl_locked_pointer.
      </description>

      <arg name="region" type="object" interface="wl_region" allow-null="true"
           summary="region of surface"/>
    </request>

    <event name="locked">
      <description summary="lock activation event">
        Notification that the pointer lock of this seat's pointer is activated.
      </description>
    </event>

    <event name="unlocked">
      <description summary="lock deactivation event">
        Notification that the pointer lock of seat's pointer is no longer
        active. This object is now defunct and should be destroyed.
      </description>
    </event>
  </interface>

  <interface name="_wl_confined_pointer" version="1">
    <description summary="confined pointer object">
      The wl_confined_pointer interface represents a confined pointer state.

      This object will send the event 'confined' when the confinement is
      activated. Whenever the confinement is activated, it is guaranteed that
      the surface the pointer is confined to will already have received pointer
      focus and that the pointer will be within the region passed to the request
      creating this object. It is up to the compositor to decide whether this
      requires some user interaction and if the pointer will warp to within the
      passed region if outside.

      To unconfine the pointer, send the destroy request. This will also destroy
      the wl_confined_pointer object.

      If the compositor decides to unconfine the pointer the unconfined event is
      sent. The wl_confined_pointer object is at this point defunct and should
      be destroyed.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the confined pointer object">
        Destroy the confined pointer object. The compositor will unconfine the
        pointer.
      </description>
    </request>

    <request name="set_region">
      <description summary="set a new confine region">
        Set a new region used to confine the pointer.

        The new confine region is double-buffered. The new confine region will
        only take effect when the associated surface gets its pending state
        applied. See wl_surface.commit for details.

        If the confinement is active when the new confinement region is applied
        and the pointer ends up outside of newly applied region, the pointer is
        warped to a position within the new confinement region. If warped, a
        wl_pointer.motion event will be emitted, but no
        wl_relative_pointer.relative_motion event.

        For details about the confine region, see wl_confined_pointer.
      </description>

      <arg name="region" type="object" interface="wl_region" allow-null="true"
           summary="region of surface"/>
    </request>

    <event name="confined">
      <description summary="enter event">
        Notification that the pointer confinement of this seat's pointer is
        activated.
      </description>
    </event>

    <event name="unconfined">
      <description summary="leave event">
        Notification that the pointer confinement of seat's pointer is no
        longer active. This object is no defunct and should be destroyed.
      </description>
    </event>
  </interface>

</protocol>
