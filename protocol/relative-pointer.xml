<?xml version="1.0" encoding="UTF-8"?>
<protocol name="relative_pointer">

  <copyright>
    Copyright © 2014      Jonas Ådahl
    Copyright © 2015      Red Hat Inc.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="_wl_relative_pointer_manager" version="1">
    <description summary="get relative pointer objects">
      A global interface used for getting the relative pointer object for a
      given seat.

      Warning! The protocol described in this file is experimental. Each version
      of this protocol should be considered incompatible with any other version,
      and a client binding to a version different to the one advertised will be
      terminated. When the protocol is stabalized, backward compatibility is
      guaranteed, the '_' prefix will be removed from the name and the version
      will be reset to 1.
    </description>

    <request name="get_relative_pointer">
      <description summary="get a relative pointer object">
        Create a relative pointer interface given a wl_pointer object. See
        the wl_relative_pointer interface for more details.
      </description>

      <arg name="id" type="new_id" interface="_wl_relative_pointer"/>
      <arg name="pointer" type="object" interface="wl_pointer"/>
    </request>
  </interface>

  <interface name="_wl_relative_pointer" version="1">
    <description summary="relative pointer object">
      A wl_relative_pointer object is an extension to the wl_pointer interface
      used for emitting relative pointer events. It shares the same focus as
      wl_pointer objects of the same seat and will only emit events when it
      has focus.
    </description>

    <request name="release" type="destructor">
      <description summary="release the relative pointer object"/>
    </request>

    <event name="relative_motion">
      <description summary="relative pointer motion">
        Relative x/y pointer motion in from the pointer of the seat associated
        with this object.

        A relative motion is in the same dimension as regular wl_pointer motion
        events, except they do not represent an absolute position. For example,
        moving a pointer from (x, y) to (x', y') would have the equivalent
        relative motion (x' - x, y' - y). If a pointer motion caused the
        absolute pointer position to be clipped by for example the edge of the
        monitor, the relative motion is unaffected by the clipping and will
        represent the unclipped motion.

        This event also contains non-accelerated motion deltas. The
        non-accelerated delta is, when applicable, the regular pointer motion
        delta as it was before having applied motion acceleration
        transformations. The compositor will have applied the same processing
        (such as normalization) meaning the events will have roughly the same
        magnitude as accelerated motion events.

        Note that the non-accelerated delta does not represent 'raw' events as
        they were read from some device. Pointer motion acceleration is device-
        and configuration-specific and non-accelerated deltas and accelerated
        deltas may have the same value on some devices.

        Relative motions are not coupled to wl_pointer.motion events, and can
        be sent in combination with such events, but also independently. There
        may also be scenarious where wl_pointer.motion is sent, but there is no
        relative motion. The order of an absolute and relative motion event
        originating from the same physical motion is not guaranteed.

        The motion vectors are encoded as double fixed point values.

        A double fixed point value is a 64 bit data type encoded as two separate
        signed 32 bit integers. The integral part of the value is stored in one
        of the integers and the fractional part in the other.

        If the client needs button events, it can receive them from a wl_pointer
        object of the same seat that the wl_relative_pointer object is
        associated with.
      </description>

      <arg name="time" type="uint"
           summary="timestamp with millisecond granularity"/>
      <arg name="dx_int" type="int"
           summary="integral part of the x component of the motion vector"/>
      <arg name="dx_frac" type="int"
           summary="fractional part of the x component of the motion vector"/>
      <arg name="dy_int" type="int"
           summary="integral part of the y component of the motion vector"/>
      <arg name="dy_frac" type="int"
           summary="fractional part of the y component of the motion vector"/>
      <arg name="dx_unaccel_int" type="int"
           summary="integral part of the x component of the unaccelerated motion vector"/>
      <arg name="dx_unaccel_frac" type="int"
           summary="fractional part of the x component of the unaccelerated motion vector"/>
      <arg name="dy_unaccel_int" type="int"
           summary="integral part of the y component of the unaccelerated motion vector"/>
      <arg name="dy_unaccel_frac" type="int"
           summary="fractional part of the y component of the unaccelerated motion vector"/>
    </event>
  </interface>

</protocol>
